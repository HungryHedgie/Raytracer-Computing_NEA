#	Hardcoded values:

FoV	#	Values between 0 and 180 degrees
FoVScale <= tan(FoV / 2) #   Pre-computed value

AA_Strength	#	Anti-Aliasing strength - Value between 0 and 1

FUNCTION findPixelsRayDirection (x, y)	#	Runs on every pixel
    #	(x, y) is the pixel co-ordinate
    #	(0, 0) is the bottom left of the image
    #	res_x and res_y is the amount of pixels in the x and y directions

    xScale <= x - 0.5 * res_x + 0.5	#	The + 0.5 means the ray is sent to the center of a pixel
    yScale <= y - 0.5 * res_y + 0.5	#	Without it, the rayDirection would head towards the bottom left of a pixel
    
    #	Random Sampling Section
    xOffset <= 0
    yOffset <= 0
    IF AntiAliasing is true:
        R <= (AA_Strength) * sqrt(Random(0, 1))  #   Sqrt ensures uniform distribution
        theta <= Random(0, 2 * pi)
        xOffset <= R * cos(theta)
        yOffset <= R * sin(theta)
    END IF
	
    float3 pixelVector <= ((xScale + xOffset) * FoVScale, (yScale + yOffset) * FoVScale, 1)
    
    rayDirection <= camera.camToWorldSpace(pixelVector)
    rayOrigin <= camera.Location
    
    return (rayOrigin, rayDirection - rayOrigin)